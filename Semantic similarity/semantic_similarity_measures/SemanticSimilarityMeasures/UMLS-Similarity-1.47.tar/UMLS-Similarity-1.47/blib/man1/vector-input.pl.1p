.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "VECTOR-INPUT 1"
.TH VECTOR-INPUT 1 "2014-06-27" "perl v5.24.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
vector\-input.pl \- This program builds the term index file and co\-occrrence matrix for umls\-similarity.pl to calculate the vector relatedness.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
vector\-input.pl takes the bigrams frequency input and build the index and the 
co-occurrence matrix.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
We build the index and co-occurrence matrix for the vector method of UMLS-Similarity.
The index file helps to locate each term's vector by recording the start position
and the length of its vector. The matrix file records every term's vector.
.PP
See perldoc vector\-input.pl
.SH "USAGE"
.IX Header "USAGE"
vector\-input.pl \s-1INDEX MATRIX BIGRAMFILE \s0
.PP
example: vector\-input.pl Index.txt Matrix.txt BigramsList.txt
.SH "INPUT"
.IX Header "INPUT"
.SS "Required Arguments:"
.IX Subsection "Required Arguments:"
\fI\s-1INDEX\s0\fR
.IX Subsection "INDEX"
.PP
output file of the vector\-input.pl. It records the index of each term 
and the vector start position and length f the co-occurrence matrix.
.PP
\fI\s-1MATRIX \s0\fR
.IX Subsection "MATRIX "
.PP
output file of the vector\-input.pl. Each line is a vector for the 
term and its co-occurrence term and their frequency.
.PP
\fI\s-1BIGRAMFILE \s0\fR
.IX Subsection "BIGRAMFILE "
.PP
Input to vector\-input.pl should be a single flat file generated by huge\-count.pl 
of Text-NSP package. If the bigrams list is generated by count.pl, pleasue use
count2huge.pl to convert the results to huge\-count.pl. It sorts the bigrams in 
the alphabet order. When vector\-input.pl generates the index and co-occurrence 
matrix file, it requires the bigrams which starts the same term t1 grouped together 
and lists next to each other. Because at this step, bigrams are not stored in
memory. If the first term of the bigrams changes, it prints the output and index
position of the vector for the term t1. Especially, if the bigrams are sorted in 
the alphabet order, it is faster for vector method of UMLS-Similarity to build the 
vector. Because for each concept, it searches the co-occurrence matrix to build 
the second order vector. If every term of the vector are sorted, the vector 
method can search the co-occurrence matrix from the beginning to the end by the 
index position and length. If the co-occurrence matrix is a huge file, it could 
save lots of execute time.
.PP
\fIOther Options:\fR
.IX Subsection "Other Options:"
.PP
\-\-stat
.IX Subsection "--stat"
.PP
The bigram file is from statistics.pl rather than count.pl
.PP
\-\-cutoff \s-1SCORE\s0
.IX Subsection "--cutoff SCORE"
.PP
Only use those ngrams that are greater than \s-1SCORE\s0
.PP
\-\-help
.IX Subsection "--help"
.PP
Displays the help information.
.PP
\-\-version
.IX Subsection "--version"
.PP
Displays the version information.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ying Liu, liux0395 at umn.edu
.SH "SEE ALSO"
.IX Header "SEE ALSO"
home page: www.tc.umn.edu/~liux0395
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2010, Ying Liu
.PP
This program is free software; you can redistribute it and/or
modify it under the terms of the \s-1GNU\s0 General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE. \s0 See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place \- Suite 330, Boston, \s-1MA  02111\-1307, USA.\s0
