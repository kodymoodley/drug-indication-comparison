.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "UMLS::Similarity::vector 3"
.TH UMLS::Similarity::vector 3 "2015-06-23" "perl v5.24.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
UMLS::Similarity::vector \- Perl module for computing semantic relatedness
of concepts in the Unified Medical Language System (UMLS) using the 
method described by Patwardhan and Pedersen (2006).
.SH "CITATION"
.IX Header "CITATION"
.Vb 10
\& @inproceedings{PatwardhanP06,
\&  title={{Using WordNet\-based Context Vectors to Estimate 
\&          the Semantic Relatedness of Concepts}},
\&  author={Patwardhan, S. and Pedersen, T.},
\&  booktitle={Proceedings of the EACL 2006 Workshop Making Sense
\&             of Sense \- Bringing Computational Linguistics and 
\&             Psycholinguistics Together},
\&  volume={1501},
\&  pages={1\-8},
\&  year={2006},
\&  month={April},
\&  address={Trento, Italy}
\& }
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use UMLS::Interface;
\&  use UMLS::Similarity::vector;
\&
\&  my $umls = UMLS::Interface\->new(); 
\&  die "Unable to create UMLS::Interface object.\en" if(!$umls);
\&
\&  my $vector = UMLS::Similarity::vector\->new($umls);
\&  die "Unable to create measure object.\en" if(!$vector);
\&
\&  my $cui1 = "C0018563";
\&  my $cui2 = "C0037303";
\&
\&  $ts1 = $umls\->getTermList($cui1);
\&  my $term1 = pop @{$ts1};
\&
\&  $ts2 = $umls\->getTermList($cui2);
\&  my $term2 = pop @{$ts2};
\&
\&  my $value = $vector\->getRelatedness($cui1, $cui2);
\&
\&  print "The similarity between $cui1 ($term1) and $cui2 ($term2) is $value\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module computes the semantic relatedness of two concepts in the  
\&\s-1UMLS\s0 according to a method described by Patwardhan & Pedersen (2006). 
\&\*(L"Using WordNet Based Context Vectors to Estimate the Semantic Relatedness 
of Concepts\*(R"  (Patwardhan and Pedersen) \- Appears in the Proceedings of 
the \s-1EACL 2006\s0 Workshop Making Sense of Sense \- Bringing Computational 
Linguistics and Psycholinguistics Together, pp. 1\-8, April 4, 2006, Trento, Italy.
http://www.d.umn.edu/~tpederse/Pubs/eacl2006\-vector.pdf
.PP
\&\-\-indexfile and \-\-matrixfile option
.PP
The co-occurrence matrix and index
file used in the vector method are prepared by vector\-input.pl method. 
Index file assigns each term of the bigrams a number and also records the 
vector position and length which starts the term of the co-occurrence matrix. 
For example, for the following bigrams list which are generated by the 
text \*(L"This is the first line Of a \s-1LONG\s0 file.\*(R":
.PP
.Vb 10
\&        9
\&        LONG<>file<>1 1 1
\&        Of<>a<>1 1 1
\&        This<>is<>1 1 1
\&        a<>LONG<>1 1 1
\&        file<>.<>1 1 1
\&        first<>line<>1 1 1
\&        is<>the<>1 1 1
\&        line<>Of<>1 1 1
\&        the<>first<>1 1 1
.Ve
.PP
The index file for the terms show up in the above will be:
.PP
.Vb 10
\&        . 1 0
\&        LONG 2 0 8
\&        Of 3 8 8
\&        This 4 16 8
\&        a 5 24 8
\&        file 6 32 8
\&        first 7 40 8
\&        is 8 48 9
\&        line 9 57 8
\&        the 10 65 9
.Ve
.PP
The co-occurrence matrix file will be:
.PP
.Vb 9
\&        2: 6 1
\&        3: 5 1
\&        4: 8 1
\&        5: 2 1
\&        6: 1 1
\&        7: 9 1
\&        8: 10 1
\&        9: 3 1
\&        10: 7 1
.Ve
.PP
Each index file assigns the term a number and also record the 
vector start position and length of the vector of the co-occurrence
matrix. For example, the first line of the matrix file \*(L"2: 6 1\*(R" means
for the term '2' which is '\s-1LONG\s0', it has a bigram pair with term 
\&'6' which is 'file', and the frequency is 1. In the index file, for 
the term '\s-1LONG\s0', it use '2' to represent '\s-1LONG\s0' and it starts at the 
\&'0' position of the file(byte) and the vector has length '8'. The 
vector\-input.pl requires the bigrams are sorted, and you could use 
count2huge.pl method of Text-NSP to convert the output of count.pl 
to huge\-count.pl.
.PP
\&\-\-defraw option
.PP
This is a flag for the vector measure. The definitions 
used are 'cleaned'. If the \-\-defraw flag is set they will not be cleaned, 
and it will leave the definitions in their \*(L"raw\*(R" form. 
If the \-\-defraw and \-\-stem option use together, the \-\-stem option
will cancel the request for \*(L"raw\*(R" defintion which is set by
\&\-\-defraw.
.PP
\&\-\-dictfile option
.PP
This is a dictionary file for the vector measure. It 
contains the 'definitions' of a concept which would be used in the 
relatedness computation. When this option is set, for the input 
pair, umls\-similarity.pl first find the CUIs or terms definition in 
the dictfile. If the \-\-config option is set, umls\-similarity.pl will
find the definition in dictfile and in \s-1UMLS.\s0 And then, the relatedness 
is computed by the combinition of \s-1UMLS\s0 and dictfile defintions.
.PP
If the \-\-dictfile option is not set, the definiton will only come from the \s-1UMLS \s0
defintion by the \-\-config option.
.PP
The input pair could be the following formats.
.PP
.Vb 3
\&    1. cui1/term1 cui2/term2 
\&       without \-\-dictfile option and without \-\-config option, 
\&       use the UMLS definition of the default config file. 
\&
\&    2. cui1/term1 cui2/term2  \-\-dictfile ./sample/dictfile
\&       \-\-dictfile option is set and without \-\-config option, 
\&       definitions only come from dictfile. 
\&
\&    3. cui1/term1 cui2/term2  \-\-config ./sample/leskmeasure.config
\&       without \-\-dictfile option, \-\-config option is set, 
\&       definitions only come from UMLS by the config file. 
\&
\&    4. cui1/term1 cui2/term2  \-\-dictfile ./sample/dictfile \-\-config ./sample/leskmeasure.config
\&       \-\-dictfile option is set, \-\-config option is set, 
\&       definitions come from dictfile and UMLS. If the associated term 
\&       for each CUI is defined in the dictfile, the associated terms\*(Aq 
\&       definition are also included.
.Ve
.PP
Terms in the dictionary file use the delimiter : to seperate the terms and
their definition. It allows multi terms in one concept. Please see the sample 
file at /sample/dictfile.
.PP
\&\-\-doubledef option
.PP
This a dictionary file for the vector measure. It contains the 
\&'definitons' of a concept which could be used in the relatedness computation. 
When this option is defined, for each unique word in the definition, it uses the word's 
definition in the doubledef file.
.PP
.Vb 2
\&    For example, the original defintion for \*(Aqcat\*(Aq is, 
\&    cat: a feline pet, feline 
\&
\&    And then, the word vector for feline and pet in the doubledef file is: 
\&    feline: small to medium\-sized cats, cougar cheetah
\&    pet: cat dog bird fish
\&
\&    The final definition for cat is to combine the original definition for cat, and 
\&    then add the definition for feline(only add once) and pet. 
\&
\&    cat: a feline pet small to medium\-sized cats cougar cheetah cat dog bird fish
\&
\&    For every unique word of the final definition, the doubledef finds the vector from the 
\&    co\-occurrence matrix of each word and build the vector for cat.
.Ve
.PP
Terms in the \-\-doubledef file use the delimiter : to seperate the terms and
their definition. It has the same format with the dictfile. Please see the
sample file at /sample/dictfile. We extract the definition from
the WordNet by glossFinder. For the extraced file, we further parse
each senses of the same word and obtain a complete definition of the
word.
.PP
\&\-\-compoundfile options
.PP
This is a compound word list for the vector or lesk measure. 
It defines the compound words which are treated as one word in the definitions. 
This must be used with the vector or lesk method. When use this option, the 
vectorindex and vectormatrix file must be generated by the corpus which also 
use the same compound words file.
.PP
.Vb 1
\&    For example, the definition for iraq and france are: 
\&
\&    iraq : saddam hussein
\&    france : jacques chirac
\&
\&    In the \-\-compoundfile file, "saddam hussein" and "jacques chirac" are compounds:
\&
\&    jacques_chirac
\&    saddam_hussein
\&
\&    So, the compound words in the definition could be detected:
\&
\&    iraq : saddam_hussein
\&    france : jacques_chirac
.Ve
.PP
The program searches the vectors for \*(L"saddam_hussein\*(R" and \*(L"jacques_chirac\*(R" in 
the vectorindex and vectormatrix file. The thing need to pay attention is 
the original text must be preprocessed by searching and replacing the compounds. 
find\-compounds.pl in the Text-NSP package can help to do that. So, both the vectorindex
and the vectormatrix files are built based on the the same compound words.
.PP
\&\-\-config option
.PP
This is configure file for the lesk or vector measure. It defines 
the relationship, source and rela relationship. When compute the relatedness
of a pair, umls\-similarity.pl find the corresponding relationshps and 
source by the config file.
.PP
\&\-\-stoplist option
.PP
This is a word list file for the vector measure. The words
in the file should be removed from the definition. In the stop list file, 
each word is in the regular expression format. A stop word sample file 
is under the samples folder which is called stoplist\-nsp.regex.
.PP
\&\-\-stem option
.PP
This is a flag for the vector measure. If we the \-\-stem flag
is set, the words of the definition are stemmed by the the Porter Stemming
algorithm. If this option is used, the original text should be stemmed too. 
Otherwise, the stemmed words cannot find the its corresponding index in the 
index file.
.SH "USAGE"
.IX Header "USAGE"
The semantic relatedness modules in this distribution are built as classes
that expose the following methods:
  \fInew()\fR
  \fIgetRelatedness()\fR
.PP
For the \fIgetRelatednes()\fR function, it accepts different combinations of CUIs and 
Terms. The following is the basic logic:
.SH "TYPICAL USAGE EXAMPLES"
.IX Header "TYPICAL USAGE EXAMPLES"
To create an object of the vector measure, we would have the following
lines of code in the perl program.
.PP
.Vb 2
\&   use UMLS::Similarity::vector;
\&   $measure = UMLS::Similarity::vector\->new($interface);
.Ve
.PP
The reference of the initialized object is stored in the scalar
variable '$measure'. '$interface' contains an interface object that
should have been created earlier in the program (UMLS-Interface).
.PP
If the 'new' method is unable to create the object, '$measure' would 
be undefined.
.PP
To find the semantic relatedness of the concept 'blood' (C0005767) and
the concept 'cell' (C0007634) using the measure, we would write
the following piece of code:
.PP
.Vb 1
\&   $relatedness = $measure\->getRelatedness(\*(AqC0005767\*(Aq, \*(AqC0007634\*(Aq);
.Ve
.SH "CONFIGURATION OPTION"
.IX Header "CONFIGURATION OPTION"
The UMLS-Interface package takes a configuration file to determine 
which sources and relations to use when obtaining the extended 
definitions. We call the definition used by the measure, the extended 
definition because this may include definitions from related concepts.
.PP
The format of the configuration file is as follows:
.PP
\&\s-1SABDEF ::\s0 <include|exclude> <source1, source2, ... sourceN>
.PP
\&\s-1RELDEF ::\s0 <include|exclude> <relation1, relation2, ... relationN>
.PP
The possible relations that can be included in \s-1RELDEF\s0 are:
  1. all of the possible relations in \s-1MRREL\s0 such as \s-1PAR, CHD, ...
  2. CUI\s0 which refers the concepts definition
  3. \s-1ST\s0 which refers to the concepts semantic types definition
  4. \s-1TERM\s0 which refers to the concepts associated terms
.PP
For example, if we wanted to use the definitions from \s-1MSH\s0 vocabulary 
and we only wanted the definition of the \s-1CUI\s0 and the definitions of the 
CUIs \s-1SIB\s0 relation, the configuration file would be:
.PP
\&\s-1SABDEF ::\s0 include \s-1MSH
RELDEF ::\s0 include \s-1CUI, SIB\s0
.PP
Note: \s-1RELDEF\s0 takes any of \s-1MRREL\s0 relations and two special 'relations':
.PP
.Vb 1
\&      1. CUI which refers to the CUIs definition
\&
\&      2. TERM which refers to the terms associated with the CUI
.Ve
.PP
If you go to the configuration file directory, there will 
be example configuration files for the different runs that 
you have performed.
.PP
For more information about the configuration options please 
see the \s-1README.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), UMLS::Interface
.PP
\&\fIperl\fR\|(1), UMLS::Similarity
.SH "CONTACT US"
.IX Header "CONTACT US"
.Vb 2
\&  If you have any trouble installing and using UMLS\-Similarity, 
\&  please contact us via the users mailing list :
\&
\&      umls\-similarity@yahoogroups.com
\&
\&  You can join this group by going to:
\&
\&      http://tech.groups.yahoo.com/group/umls\-similarity/
\&
\&  You may also contact us directly if you prefer :
\&
\&      Bridget T. McInnes: bthomson at cs.umn.edu 
\&
\&      Ted Pedersen : tpederse at d.umn.edu
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 5
\&  Bridget T McInnes <bthomson at cs.umn.edu>
\&  Siddharth Patwardhan <sidd at cs.utah.edu>
\&  Serguei Pakhomov <pakh0002 at umn.edu>
\&  Ted Pedersen <tpederse at d.umn.edu>
\&  Ying Liu <liux0935 at umn.edu>
.Ve
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2004\-2011 by Bridget T McInnes, Siddharth Patwardhan, 
Serguei Pakhomov, Ying Liu and Ted Pedersen
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
