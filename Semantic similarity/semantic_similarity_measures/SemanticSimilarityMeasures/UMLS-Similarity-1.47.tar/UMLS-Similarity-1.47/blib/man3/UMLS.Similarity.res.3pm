.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "UMLS::Similarity::res 3"
.TH UMLS::Similarity::res 3 "2013-04-21" "perl v5.24.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
UMLS::Similarity::res \- Perl module for computing the semantic 
relatednessof concepts in the Unified Medical Language System 
(UMLS) using the method described by Resnik (1995).
.SH "CITATION"
.IX Header "CITATION"
.Vb 10
\& @article{Resnik95,
\&  title={{Using information content to evaluate semantic 
\&          similarity in a taxonomy}},
\&  author={Resnik, P.},
\&  journal={Proceedings of the 14th International Joint 
\&           Conference on Artificial Intelligence},
\&  volume={1},
\&  pages={448\-\-453},
\&  year={1995}
\& }
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use UMLS::Interface;
\&  use UMLS::Similarity::res;
\&
\&  my $umls = UMLS::Interface\->new(); 
\&  die "Unable to create UMLS::Interface object.\en" if(!$umls);
\&
\&  my $res = UMLS::Similarity::res\->new($umls);
\&  die "Unable to create measure object.\en" if(!$res);
\&
\&  my $cui1 = "C0005767";
\&  my $cui2 = "C0007634";
\&
\&  $ts1 = $umls\->getTermList($cui1);
\&  my $term1 = pop @{$ts1};
\&
\&  $ts2 = $umls\->getTermList($cui2);
\&  my $term2 = pop @{$ts2};
\&
\&  my $value = $res\->getRelatedness($cui1, $cui2);
\&
\&  print "The similarity between $cui1 ($term1) and $cui2 ($term2) is $value\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module computes the semantic similarity of two concepts in 
the \s-1UMLS\s0 according to a method described by Resnik (1995). The 
relatedness measure proposed by Resnik is the information content 
(\s-1IC\s0) of the least common subsumer of the two concepts.
.PP
The \s-1IC\s0 of a concept is defined as the negative log of the probabilty 
of the concept.
.PP
To use this measure, a propagation file containing the probability 
of a \s-1CUI\s0 for each of the CUIs from the source(s) specified in the 
configuration file. The format for this file is as follows:
.PP
.Vb 4
\& C0000039<>0.00003951
\& C0000052<>0.00003951
\& C0000084<>0.00003951
\& C0000096<>0.00003951
.Ve
.PP
A larger of example of this file can be found in the icpropagation file 
in the samples/ directory.
.PP
A propagation file can be created using the create\-icfrequency.pl and 
the create\-icpropagation.pl programs in the utils/ directory. The 
create\-icfrequency.pl program takes plain text and returns a list of 
CUIs that are mapped to the text and the CUIs frequency counts. This 
file can then be used by the create\-icpropagation.pl program to create 
a file containing a list of CUIs and their probability, or used 
directly by the umls\-similarity.pl program which will calculate the 
probability of a concept on the fly.
.SH "PROPAGATION"
.IX Header "PROPAGATION"
The Information Content (\s-1IC\s0) is  defined as the negative log 
of the probability of a concept. The probability of a concept, 
c, is determine by summing the probability of the concept 
ocurring in some text plus the probability its decendants 
occuring in some text:
.PP
For more information on how this is calculated please see 
the \s-1README\s0 file.
.SH "USAGE"
.IX Header "USAGE"
The semantic relatedness modules in this distribution are built as classes
that expose the following methods:
  \fInew()\fR
  \fIgetRelatedness()\fR
  \fIgetError()\fR
.SH "TYPICAL USAGE EXAMPLES"
.IX Header "TYPICAL USAGE EXAMPLES"
To create an object of the res measure, we would have the following
lines of code in the perl program.
.PP
.Vb 2
\&   use UMLS::Similarity::res;
\&   $measure = UMLS::Similarity::res\->new($interface);
.Ve
.PP
The reference of the initialized object is stored in the scalar
variable '$measure'. '$interface' contains an interface object that
should have been created earlier in the program (UMLS-Interface).
.PP
If the 'new' method is unable to create the object, '$measure' would 
be undefined. This, as well as any other error/warning may be tested.
.PP
.Vb 3
\&   die "Unable to create object.\en" if(!defined $measure);
\&   ($err, $errString) = $measure\->getError();
\&   die $errString."\en" if($err);
.Ve
.PP
To find the semantic relatedness of the concept 'blood' (C0005767) and
the concept 'cell' (C0007634) using the measure, we would write
the following piece of code:
.PP
.Vb 1
\&   $relatedness = $measure\->getRelatedness(\*(AqC0005767\*(Aq, \*(AqC0007634\*(Aq);
.Ve
.SH "CONFIGURATION OPTION"
.IX Header "CONFIGURATION OPTION"
The UMLS-Interface package takes a configuration file to determine 
which sources and relations to use when obtaining the path information.
.PP
The format of the configuration file is as follows:
.PP
\&\s-1SAB ::\s0 <include|exclude> <source1, source2, ... sourceN>
.PP
\&\s-1REL ::\s0 <include|exclude> <relation1, relation2, ... relationN>
.PP
For example, if we wanted to use the \s-1MSH\s0 vocabulary with only 
the \s-1RB/RN\s0 relations, the configuration file would be:
.PP
\&\s-1SAB ::\s0 include \s-1MSH
REL ::\s0 include \s-1RB, RN\s0
.PP
or
.PP
\&\s-1SAB ::\s0 include \s-1MSH
REL ::\s0 exclude \s-1PAR, CHD\s0
.PP
If you go to the configuration file directory, there will 
be example configuration files for the different runs that 
you have performed.
.PP
For more information about the configuration options please 
see the \s-1README.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), UMLS::Interface
.PP
\&\fIperl\fR\|(1), \fIUMLS::Similarity\fR\|(3)
.SH "CONTACT US"
.IX Header "CONTACT US"
.Vb 2
\&  If you have any trouble installing and using UMLS\-Similarity, 
\&  please contact us via the users mailing list :
\&
\&      umls\-similarity@yahoogroups.com
\&
\&  You can join this group by going to:
\&
\&      http://tech.groups.yahoo.com/group/umls\-similarity/
\&
\&  You may also contact us directly if you prefer :
\&
\&      Bridget T. McInnes: bthomson at cs.umn.edu 
\&
\&      Ted Pedersen : tpederse at d.umn.edu
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 4
\&  Bridget T McInnes <bthomson at cs.umn.edu>
\&  Siddharth Patwardhan <sidd at cs.utah.edu>
\&  Serguei Pakhomov <pakh0002 at umn.edu>
\&  Ted Pedersen <tpederse at d.umn.edu>
.Ve
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2004\-2011 by Bridget T McInnes, Siddharth Patwardhan, 
Serguei Pakhomov, Ying Liu and Ted Pedersen
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
